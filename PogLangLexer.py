# Generated from PogLang.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,37,226,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,1,0,1,0,1,0,1,0,1,0,1,
        0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,
        5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,
        10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,
        13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,
        18,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,
        23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,
        29,1,30,1,30,1,31,1,31,1,32,1,32,5,32,188,8,32,10,32,12,32,191,9,
        32,1,33,4,33,194,8,33,11,33,12,33,195,1,34,1,34,1,34,1,34,5,34,202,
        8,34,10,34,12,34,205,9,34,1,34,1,34,1,35,4,35,210,8,35,11,35,12,
        35,211,1,35,1,35,1,36,1,36,1,36,1,36,5,36,220,8,36,10,36,12,36,223,
        9,36,1,36,1,36,0,0,37,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
        21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,
        32,65,33,67,34,69,35,71,36,73,37,1,0,6,3,0,65,90,95,95,97,122,4,
        0,48,57,65,90,95,95,97,122,1,0,48,57,4,0,10,10,13,13,34,34,92,92,
        3,0,9,10,13,13,32,32,2,0,10,10,13,13,231,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
        45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,
        55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,
        65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,1,
        75,1,0,0,0,3,81,1,0,0,0,5,85,1,0,0,0,7,89,1,0,0,0,9,93,1,0,0,0,11,
        96,1,0,0,0,13,101,1,0,0,0,15,107,1,0,0,0,17,115,1,0,0,0,19,124,1,
        0,0,0,21,128,1,0,0,0,23,132,1,0,0,0,25,139,1,0,0,0,27,141,1,0,0,
        0,29,143,1,0,0,0,31,145,1,0,0,0,33,147,1,0,0,0,35,150,1,0,0,0,37,
        153,1,0,0,0,39,155,1,0,0,0,41,158,1,0,0,0,43,160,1,0,0,0,45,163,
        1,0,0,0,47,166,1,0,0,0,49,169,1,0,0,0,51,171,1,0,0,0,53,173,1,0,
        0,0,55,175,1,0,0,0,57,177,1,0,0,0,59,179,1,0,0,0,61,181,1,0,0,0,
        63,183,1,0,0,0,65,185,1,0,0,0,67,193,1,0,0,0,69,197,1,0,0,0,71,209,
        1,0,0,0,73,215,1,0,0,0,75,76,5,115,0,0,76,77,5,116,0,0,77,78,5,97,
        0,0,78,79,5,114,0,0,79,80,5,116,0,0,80,2,1,0,0,0,81,82,5,101,0,0,
        82,83,5,110,0,0,83,84,5,100,0,0,84,4,1,0,0,0,85,86,5,118,0,0,86,
        87,5,97,0,0,87,88,5,108,0,0,88,6,1,0,0,0,89,90,5,118,0,0,90,91,5,
        97,0,0,91,92,5,114,0,0,92,8,1,0,0,0,93,94,5,105,0,0,94,95,5,102,
        0,0,95,10,1,0,0,0,96,97,5,101,0,0,97,98,5,108,0,0,98,99,5,115,0,
        0,99,100,5,101,0,0,100,12,1,0,0,0,101,102,5,119,0,0,102,103,5,104,
        0,0,103,104,5,105,0,0,104,105,5,108,0,0,105,106,5,101,0,0,106,14,
        1,0,0,0,107,108,5,112,0,0,108,109,5,114,0,0,109,110,5,105,0,0,110,
        111,5,110,0,0,111,112,5,116,0,0,112,113,5,108,0,0,113,114,5,110,
        0,0,114,16,1,0,0,0,115,116,5,114,0,0,116,117,5,101,0,0,117,118,5,
        97,0,0,118,119,5,100,0,0,119,120,5,76,0,0,120,121,5,105,0,0,121,
        122,5,110,0,0,122,123,5,101,0,0,123,18,1,0,0,0,124,125,5,112,0,0,
        125,126,5,111,0,0,126,127,5,103,0,0,127,20,1,0,0,0,128,129,5,73,
        0,0,129,130,5,110,0,0,130,131,5,116,0,0,131,22,1,0,0,0,132,133,5,
        83,0,0,133,134,5,116,0,0,134,135,5,114,0,0,135,136,5,105,0,0,136,
        137,5,110,0,0,137,138,5,103,0,0,138,24,1,0,0,0,139,140,5,43,0,0,
        140,26,1,0,0,0,141,142,5,45,0,0,142,28,1,0,0,0,143,144,5,42,0,0,
        144,30,1,0,0,0,145,146,5,47,0,0,146,32,1,0,0,0,147,148,5,61,0,0,
        148,149,5,61,0,0,149,34,1,0,0,0,150,151,5,33,0,0,151,152,5,61,0,
        0,152,36,1,0,0,0,153,154,5,60,0,0,154,38,1,0,0,0,155,156,5,60,0,
        0,156,157,5,61,0,0,157,40,1,0,0,0,158,159,5,62,0,0,159,42,1,0,0,
        0,160,161,5,62,0,0,161,162,5,61,0,0,162,44,1,0,0,0,163,164,5,38,
        0,0,164,165,5,38,0,0,165,46,1,0,0,0,166,167,5,124,0,0,167,168,5,
        124,0,0,168,48,1,0,0,0,169,170,5,33,0,0,170,50,1,0,0,0,171,172,5,
        123,0,0,172,52,1,0,0,0,173,174,5,125,0,0,174,54,1,0,0,0,175,176,
        5,40,0,0,176,56,1,0,0,0,177,178,5,41,0,0,178,58,1,0,0,0,179,180,
        5,59,0,0,180,60,1,0,0,0,181,182,5,58,0,0,182,62,1,0,0,0,183,184,
        5,61,0,0,184,64,1,0,0,0,185,189,7,0,0,0,186,188,7,1,0,0,187,186,
        1,0,0,0,188,191,1,0,0,0,189,187,1,0,0,0,189,190,1,0,0,0,190,66,1,
        0,0,0,191,189,1,0,0,0,192,194,7,2,0,0,193,192,1,0,0,0,194,195,1,
        0,0,0,195,193,1,0,0,0,195,196,1,0,0,0,196,68,1,0,0,0,197,203,5,34,
        0,0,198,202,8,3,0,0,199,200,5,92,0,0,200,202,9,0,0,0,201,198,1,0,
        0,0,201,199,1,0,0,0,202,205,1,0,0,0,203,201,1,0,0,0,203,204,1,0,
        0,0,204,206,1,0,0,0,205,203,1,0,0,0,206,207,5,34,0,0,207,70,1,0,
        0,0,208,210,7,4,0,0,209,208,1,0,0,0,210,211,1,0,0,0,211,209,1,0,
        0,0,211,212,1,0,0,0,212,213,1,0,0,0,213,214,6,35,0,0,214,72,1,0,
        0,0,215,216,5,47,0,0,216,217,5,47,0,0,217,221,1,0,0,0,218,220,8,
        5,0,0,219,218,1,0,0,0,220,223,1,0,0,0,221,219,1,0,0,0,221,222,1,
        0,0,0,222,224,1,0,0,0,223,221,1,0,0,0,224,225,6,36,0,0,225,74,1,
        0,0,0,7,0,189,195,201,203,211,221,1,6,0,0
    ]

class PogLangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    START = 1
    END = 2
    VAL = 3
    VAR = 4
    IF = 5
    ELSE = 6
    WHILE = 7
    PRINTLN = 8
    READLINE = 9
    POG = 10
    INT_TYPE = 11
    STRING_TYPE = 12
    PLUS = 13
    MINUS = 14
    MULT = 15
    DIV = 16
    EQUALS = 17
    NEQUALS = 18
    LT = 19
    LTE = 20
    GT = 21
    GTE = 22
    AND = 23
    OR = 24
    NOT = 25
    LBRACE = 26
    RBRACE = 27
    LPAREN = 28
    RPAREN = 29
    SEMI = 30
    COLON = 31
    ASSIGN = 32
    ID = 33
    INT = 34
    STRING = 35
    WS = 36
    COMMENT = 37

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'start'", "'end'", "'val'", "'var'", "'if'", "'else'", "'while'", 
            "'println'", "'readLine'", "'pog'", "'Int'", "'String'", "'+'", 
            "'-'", "'*'", "'/'", "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", 
            "'&&'", "'||'", "'!'", "'{'", "'}'", "'('", "')'", "';'", "':'", 
            "'='" ]

    symbolicNames = [ "<INVALID>",
            "START", "END", "VAL", "VAR", "IF", "ELSE", "WHILE", "PRINTLN", 
            "READLINE", "POG", "INT_TYPE", "STRING_TYPE", "PLUS", "MINUS", 
            "MULT", "DIV", "EQUALS", "NEQUALS", "LT", "LTE", "GT", "GTE", 
            "AND", "OR", "NOT", "LBRACE", "RBRACE", "LPAREN", "RPAREN", 
            "SEMI", "COLON", "ASSIGN", "ID", "INT", "STRING", "WS", "COMMENT" ]

    ruleNames = [ "START", "END", "VAL", "VAR", "IF", "ELSE", "WHILE", "PRINTLN", 
                  "READLINE", "POG", "INT_TYPE", "STRING_TYPE", "PLUS", 
                  "MINUS", "MULT", "DIV", "EQUALS", "NEQUALS", "LT", "LTE", 
                  "GT", "GTE", "AND", "OR", "NOT", "LBRACE", "RBRACE", "LPAREN", 
                  "RPAREN", "SEMI", "COLON", "ASSIGN", "ID", "INT", "STRING", 
                  "WS", "COMMENT" ]

    grammarFileName = "PogLang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


